---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { CDate } from "../../../../src/date";
import { getPluginData } from "../../../../src/utils";
import { getPluginCountMonthly, getPluginCountWoRetiredMonthly, getPluginDownloadsWeekly } from "../../../../src/plugin/data";
import Aside from "../../components/aside.astro";
import PluginLink from "../../components/pluginLink.astro";

enum MilestoneType {
    PLUGIN_COUNT = 'plugin-count',
    TOTAL_DOWNLOADS = 'total-downloads',
    RELEASE_COUNT = 'release-count',
    DOWNLOAD_COUNT = 'download-count',
}

const MILESTONE_STEPS = [1, 2, 5];
const MILESTONE_POTENTIALS = [100, 1_000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000];

const milestones = MILESTONE_POTENTIALS.flatMap((potential) => {
    return MILESTONE_STEPS.map((step) => {
        return potential * step;
    });
});

const reachedMilestones: Record<MilestoneType, number> = {
    [MilestoneType.PLUGIN_COUNT]: -1,
    [MilestoneType.TOTAL_DOWNLOADS]: -1,
    [MilestoneType.RELEASE_COUNT]: -1,
    [MilestoneType.DOWNLOAD_COUNT]: -1,
};

interface MilestoneData {
    type: MilestoneType;
    milestone: number;
    date: CDate;
    data: string;
}

const pluginData = getPluginData();
const pluginCountMonthly = getPluginCountWoRetiredMonthly(pluginData);
const pluginDownloadCountWeekly = getPluginDownloadsWeekly(pluginData);

const milestoneData: Map<string, MilestoneData[]> = new Map();

function reachedMilestone(type: MilestoneType, value: number): boolean {
    const target = milestones[reachedMilestones[type] + 1];
    if (value >= target) {
        reachedMilestones[type] += 1;
        return true;
    }

    return false;
}

function checkMilestones(type: MilestoneType, value: number, date: CDate, getMilestoneData: (milestone: number) => string): void {
    const monthString = date.toMonthString();
    while (reachedMilestone(type, value)) {
        const milestone = milestones[reachedMilestones[type]];
        const data = getMilestoneData(milestone);
        if (!milestoneData.has(monthString)) {
            milestoneData.set(monthString, []);
        }

        milestoneData.get(monthString)!.push({ type, milestone, data, date });
    }
}

const milestoneCheckers: Record<MilestoneType, (date: CDate) => void> = {
    [MilestoneType.PLUGIN_COUNT]: (date: CDate) => {
        const year = date.yearString();
        const month = date.monthString();
        const dataPoint = pluginCountMonthly.find(x => x.year === year && x.month === month);

        if (dataPoint) {
            checkMilestones(MilestoneType.PLUGIN_COUNT, dataPoint.value, date, (_) => '');
        }
    },
    [MilestoneType.TOTAL_DOWNLOADS]: (date: CDate) => {
        const dateString = date.toMonthString();
        const dataPoint = pluginDownloadCountWeekly.findLast(x => x.date.startsWith(dateString));

        if (dataPoint) {
            checkMilestones(MilestoneType.TOTAL_DOWNLOADS, dataPoint.downloads ?? 0, date, (_) => '');
        }
    },
    [MilestoneType.RELEASE_COUNT]: (date: CDate) => {
        const dateString = date.toString();
        const releaseCountData = pluginData.map(x => {
            const releaseCount = x.versionHistory.filter(v => v.initialReleaseDate <= dateString).length;
            return {
                data: x,
                releaseCount,
            }
        });
        let maxEntry = releaseCountData[0];
        for (const entry of releaseCountData) {
            if (entry.releaseCount > maxEntry.releaseCount) {
                maxEntry = entry;
            }
        }
        checkMilestones(MilestoneType.RELEASE_COUNT, maxEntry.releaseCount, date, (milestone) => {
            return maxEntry.data.id;
        });
    },
    [MilestoneType.DOWNLOAD_COUNT]: (date: CDate) => {
        const dateString = date.toString();
        const downloadCountData = pluginData.map(x => {
            // this relies on the odering of download data
            const downloadCount = Object.entries(x.downloadHistory).findLast(([date, _]) => date <= dateString)?.[1] ?? 0;
            return {
                data: x,
                downloadCount,
            }
        });
        let maxEntry = downloadCountData[0];
        for (const entry of downloadCountData) {
            if (entry.downloadCount > maxEntry.downloadCount) {
                maxEntry = entry;
            }
        }
        checkMilestones(MilestoneType.DOWNLOAD_COUNT, maxEntry.downloadCount, date, (milestone) => {
            return maxEntry.data.id;
        });
    },
};

CDate.iterateMonthly(CDate.fromString('2020-01-01'), CDate.fromNow(), (date) => {
    for (const type of Object.values(MilestoneType)) {
        milestoneCheckers[type](date);
    }   
});

const milestoneDataArray = Array.from(milestoneData.entries()).sort((a, b) => {
    return b[0].localeCompare(a[0]);
});

for (const [_, data] of milestoneDataArray) {
    data.reverse();
}

---

<StarlightPage
	frontmatter={{
		title: 'Plugin Milestones',
		description: `Major milestones in the plugin ecosystem.`,
	}}
>
    <div class="timeline">
        {milestoneDataArray.map(e => <div class="timeline-group">
            <h3 class="timeline-group-heading">{e[0]}</h3>
            <div class="timeline-group-content">
                {e[1].map(m => {
                    if (m.type === MilestoneType.TOTAL_DOWNLOADS) {
                        return (
                            <div class="timeline-element">
                                <h4 class="timeline-element-heading">Total plugin downloads reach {m.milestone.toLocaleString()}</h4>
                                <p>
                                    The number of downloads for all plugins listed on the community plugin list reached {m.milestone.toLocaleString()}.
                                </p>
                            </div>
                            // <Aside title={`Total plugin downloads reach ${m.milestone.toLocaleString()}`} variant="tip">
                            //     In {m.date.monthNameFormat()}, the number of downloads for all plugins listed on the community plugin list reached {m.milestone.toLocaleString()}.
                            // </Aside>
                        );
                    } else if (m.type === MilestoneType.PLUGIN_COUNT) {
                        return (
                         <div class="timeline-element">
                                <h4 class="timeline-element-heading">Total Plugin count reaches {m.milestone.toLocaleString()}</h4>
                                <p>
                                    The number of plugins listed on the community plugin list reached {m.milestone.toLocaleString()}.
                                </p>
                            </div>
                            // <Aside title={`Total Plugin count reaches ${m.milestone.toLocaleString()}`} variant="caution">
                            //     In {m.date.monthNameFormat()}, the number of plugins listed on the community plugin list reached {m.milestone.toLocaleString()}.
                            // </Aside>
                        );
                    } else if (m.type === MilestoneType.RELEASE_COUNT) {
                        return (
                            <div class="timeline-element">
                                <h4 class="timeline-element-heading">First plugin reaches {m.milestone.toLocaleString()} releases</h4>
                                <p>
                                    <PluginLink id={m.data}></PluginLink> is the first plugin to reach {m.milestone.toLocaleString()} releases.
                                </p>
                            </div>
                            // <Aside title={`First plugin reaches ${m.milestone.toLocaleString()} releases`} variant="note">
                            //     In {m.date.monthNameFormat()}, <PluginLink id={m.data}></PluginLink> is the first plugin to reach {m.milestone.toLocaleString()} releases.
                            // </Aside>
                        );
                    } else if (m.type === MilestoneType.DOWNLOAD_COUNT) {
                        return (
                            <div class="timeline-element">
                                <h4 class="timeline-element-heading">First plugin reaches {m.milestone.toLocaleString()} downloads</h4>
                                <p>
                                    <PluginLink id={m.data}></PluginLink> is the first plugin to reach {m.milestone.toLocaleString()} downloads.
                                </p>
                            </div>
                            // <Aside title={`First plugin reaches ${m.milestone.toLocaleString()} downloads`} variant="danger">
                            //     In {m.date.monthNameFormat()}, <PluginLink id={m.data}></PluginLink> is the first plugin to reach {m.milestone.toLocaleString()} downloads.
                            // </Aside>
                        );
                    }
                })}
            </div>
        </div>)}
    </div>
</StarlightPage>