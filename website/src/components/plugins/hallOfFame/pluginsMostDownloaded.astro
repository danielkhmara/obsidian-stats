---
import type { PluginDataInterface } from '../../../../../src/plugin/plugin';
import { getPluginDownloadsWeekly } from '../../../../../src/plugin/data';
import PluginLink from '../../pluginLink.astro';
import MultiLineBarChart from '../../svelte/genericCharts/multiLineBarChart.svelte';
import { CDate } from '../../../../../src/date';
import { getPluginData } from '../../../../../src/utils';

const { year, releaseYear } = Astro.props as {
	year: number | undefined;
	releaseYear: number | undefined;
};

function filterDataByReleaseYear(data: PluginDataInterface[]): PluginDataInterface[] {
	return data.filter(data => CDate.fromString(data.addedCommit.date).year === releaseYear);
}

const dataFile: PluginDataInterface[] = releaseYear ? filterDataByReleaseYear(getPluginData()) : getPluginData();

let startDate: CDate | undefined = undefined;
let endDate: CDate | undefined = undefined;

if (year !== undefined) {
	startDate = CDate.fromString(`${year}-01-01`);
	endDate = CDate.fromString(`${year + 1}-01-01`);

	startDate.advanceToNextSunday();
	endDate.advanceToNextSunday();
}

let downloadData = dataFile.map(x => {
	let downloads = getPluginDownloadsWeekly([x]);
	let totalDownloads = 0;

	if (year !== undefined && startDate !== undefined && endDate !== undefined) {
		downloads = downloads.filter(x => CDate.fromString(x.date).inRange(startDate, endDate));

		const firstData = downloads.find(x => x.downloads !== undefined);
		const lastData = downloads.findLast(x => x.downloads !== undefined);

		totalDownloads = (lastData?.downloads ?? 0) - (firstData?.downloads ?? 0);
	} else {
		const lastData = downloads.findLast(x => x.downloads !== undefined);

		totalDownloads = lastData?.downloads ?? 0;
	}

	return {
		data: x,
		downloads: downloads,
		totalDownloads: totalDownloads,
	};
});

downloadData.sort((a, b) => {
	return b.totalDownloads - a.totalDownloads;
});

let downloadDataTop = downloadData.slice(0, 10);

let chartLabelSet = new Set<string>();

for (const data of downloadDataTop) {
	for (const download of data.downloads) {
		chartLabelSet.add(download.date);
	}
}

let chartLabels = [...chartLabelSet];
chartLabels.sort();

let chartData = downloadDataTop.map(x => {
	let data: (number | undefined)[] = new Array(chartLabels.length).fill(undefined);

	for (const download of x.downloads) {
		const index = chartLabels.indexOf(download.date);
		data[index] = download.downloads;
	}

	let firstDownloadData = x.downloads.find(x => x.downloads !== undefined);

	if (firstDownloadData !== undefined && firstDownloadData.downloads !== undefined) {
		for (let i = 0; i < data.length; i++) {
			if (data[i] !== undefined) {
				data[i]! -= firstDownloadData.downloads;
			}
		}
	}

	return data;
});
---

<table>
	<thead>
		<tr>
			<th>Plugin Id</th>
			<th>Plugin Name</th>
			<th>Downloads</th>
		</tr>
	</thead>
	<tbody>
		{
			downloadDataTop.map(x => (
				<tr>
					<td>
						<PluginLink id={x.data.id} />
					</td>
					<td>{x.data.currentEntry.name}</td>
					<td>{x.totalDownloads}</td>
				</tr>
			))
		}
	</tbody>
</table>

<MultiLineBarChart dataPoints={chartData} labels={chartLabels} setLabels={downloadDataTop.map(x => x.data.id)} type="line" client:only="svelte" />
