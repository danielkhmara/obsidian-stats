---
import { Version } from '../../../../src/version';
import { determineAssetType } from '../../../../src/release/data';

import { readFileSync } from 'fs';
import { escape, fromCSV, op } from 'arquero';

import StackedBarChart from '../svelte/genericCharts/stackedBarChart.svelte';

let ReleaseData = fromCSV(readFileSync('../releases-full-data.csv', 'utf8'));

const ReleaseDataWithAssetType = ReleaseData.derive({ assetType: escape(d => determineAssetType(d.asset)) });

const firstAssetAppearance = ReleaseDataWithAssetType.groupby('assetType').filter(d => op.first_value(d.asset) === d.asset);

const ReleaseDataGroupedWithFirstAssetAppearance = firstAssetAppearance
	.select('assetType', 'size')
	.rename({ size: 'firstAssetSize' })
	.join(ReleaseDataWithAssetType, 'assetType');

const allVersions = ReleaseData.distinctArray('version');
const allVersionsPretty = allVersions.map(x => Version.pretty(x));

const normalisedAssetSize = ReleaseDataGroupedWithFirstAssetAppearance.derive({ normalisedSize: d => d.size / d.firstAssetSize })
	.select('version', 'assetType', 'normalisedSize')
	.imputeAll(['version', 'assetType'], ['normalisedSize'])
	.groupby('assetType')
	.rollup({ normalisedSize: d => op.array_agg(d.normalisedSize) })
	.select({ assetType: 'label', normalisedSize: 'data' })
	.objects({ grouped: true });
---

<StackedBarChart dataPoints={normalisedAssetSize} labels={allVersionsPretty} client:only="svelte" />
