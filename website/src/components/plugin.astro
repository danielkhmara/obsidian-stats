---
import { projectRelativeUrl } from '../utils/base';
import Commit from './commit.astro';
import Aside from './aside.astro';
import PluginDownloadChart from './svelte/pluginDownloadChart.svelte';
import { getPluginDownloadsWeekly } from '../../../src/plugin/data';
import type { PluginDataInterface } from '../../../src/plugin/plugin';
import fs from 'node:fs/promises';
import type { PluginRepoData } from '../../../src/pluginRepo/types';
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';

const { plugin } = Astro.props as { plugin: PluginDataInterface };
const pluginDownloadData = getPluginDownloadsWeekly([plugin]);

const latestReleaseDateString = plugin.versionHistory.at(-1)?.initialReleaseDate ?? plugin.addedCommit.date;

const obsidianLink = `obsidian://show-plugin?id=${plugin.id}`;
const obsidianHubLink = `https://publish.obsidian.md/hub/02+-+Community+Expansions/02.05+All+Community+Expansions/Plugins/${plugin.id}`;
const obsidianAddictLink = `https://obsidianaddict.com/plugin/${plugin.id}/`;

const repoDataUrl = projectRelativeUrl(`../pluginRepos/data/${plugin.id}.json`);
let repoData: PluginRepoData = JSON.parse(await fs.readFile(repoDataUrl, 'utf-8'));

function getFundingLinks(urls: string | Record<string, string>): { text: string; href: string }[] {
	if (typeof urls === 'string') {
		return [{ text: 'Support the Author', href: urls }];
	}

	return Object.entries(urls).map(([text, href]) => ({ text: `Support the Author via ${text}`, href }));
}

const external_links: { text: string; href: string }[] = [
	repoData?.repo?.manifest?.helpUrl ? { text: 'Plugin Docs', href: repoData.repo.manifest.helpUrl } : undefined,
	{ text: 'GitHub Repo', href: `https://github.com/${plugin.currentEntry.repo}` },
	{ text: 'View in Obsidian', href: obsidianLink },
	// { text: 'View on ObsidianAddict', href: obsidianAddictLink },
	{ text: 'View on the Obsidian Hub', href: obsidianHubLink },
	repoData.repo?.manifest.authorUrl ? { text: 'Author Website', href: repoData.repo.manifest.authorUrl } : undefined,
	...(repoData.repo?.manifest.fundingUrl ? getFundingLinks(repoData.repo.manifest.fundingUrl) : []),
].filter(x => x !== undefined);
---

<StarlightPage
	frontmatter={{
		title: plugin.currentEntry.name,
		description: `Page for the ${plugin.currentEntry.name} plugin.`,
		links: external_links,
	}}
	headings={[
		{ depth: 2, text: 'Data', slug: 'data' },
		{ depth: 3, text: 'Changes', slug: 'changes' },
		{ depth: 3, text: 'Repository Data', slug: 'repository-data' },
		{ depth: 2, text: 'Downloads', slug: 'downloads' },
		{ depth: 2, text: 'Version History', slug: 'version-history' },
	]}
>
	<p>{plugin.currentEntry.description}</p>

	{
		repoData.warnings.map(warning => {
			switch (warning.id) {
				case 'inactivity-12-months':
					return (
						<Aside variant="caution" title="Inactivity Warning">
							<p>The latest version of this plugin was released on the {warning.lastReleaseDate} and is thus more than one year old.</p>
						</Aside>
					);
				case 'inactivity-24-months':
					return (
						<Aside variant="danger" title="Inactivity Warning">
							<p>The latest version of this plugin was released on the {warning.lastReleaseDate} and is thus more than two years old.</p>
						</Aside>
					);
				case 'removed':
					return (
						<Aside variant="danger" title="Removed Plugin">
							<p>
								{repoData.removalReason ? (
									<>
										This plugin has been removed from the community list on <Commit commit={warning.commit} /> with reason <i>{repoData.removalReason}</i> and
										can no longer be installed.
									</>
								) : (
									<>
										This plugin has been removed from the community list on <Commit commit={warning.commit} /> and can no longer be installed.
									</>
								)}
							</p>
						</Aside>
					);
				case 'mismatched-manifest-data':
					return (
						<Aside variant="caution" title="Mismatched Data">
							<p>The data in the community list does not match the data in the plugin's repository.</p>
							<table class="full-width">
								<thead>
									<tr>
										<th>Property</th>
										<th>Community List</th>
										<th>Repository</th>
									</tr>
								</thead>
								<tbody>
									{warning.data.map(x => (
										<tr>
											<td>{x.field}</td>
											<td>{x.communityListValue}</td>
											<td>{x.manifestValue}</td>
										</tr>
									))}
								</tbody>
							</table>
						</Aside>
					);
				case 'unlicensed':
					return (
						<Aside variant="danger" title="Unlicensed Plugin">
							<p>
								This plugin is explicitly not licensed, thus the author has all rights reserved. This means that it can not be forked or maintained by another
								developer without explicit approval be the current author.
							</p>
							<p>
								This information is based on the <code>LICENSE</code> file in the plugin's repository. Identification of said file may not be accurate.
							</p>
						</Aside>
					);
				case 'no-license':
					return (
						<Aside variant="danger" title="Unlicensed Plugin">
							<p>
								This plugin intentionally or unintentionally specified no license. This means that it can not be forked or maintained by another developer
								without explicit approval be the current author. Please consider asking the developer to add a license to{' '}
								<a href={`https://github.com/${plugin.currentEntry.repo}`} target="_blank">
									their repository
								</a>
								.
							</p>
							<p>
								This information is based on the absence of a <code>LICENSE</code>, <code>LICENSE.md</code>, or <code>LICENSE.txt</code> file in the plugin's
								repository.
							</p>
						</Aside>
					);
				case 'mismatched-license':
					return (
						<Aside variant="danger" title="Mismatched License">
							<p>
								The license information in the plugin's <code>package.json</code> file (<code>{repoData.repo?.license}</code>) does not match the{' '}
								<code>LICENSE</code> file (<code>{repoData.repo?.licenseFile}</code>) in the repository. The <code>LICENSE</code> file takes precedence, but
								please consider asking the developer to clarify the license of the plugin.
							</p>
							<p>
								This information is based on the <code>LICENSE</code> file in the plugin's repository. Identification of said file may not be accurate.
							</p>
						</Aside>
					);
			}
		})
	}

	{repoData.warnings.length !== 0 && <p class="muted">The above warnings are based on limited information and might not always be accurate.</p>}

	<h2 id="data">Data</h2>

	<table class="full-width">
		<tbody>
			<tr>
				<td>ID</td>
				<td>{plugin.id}</td>
			</tr>
			<tr>
				<td>Author</td>
				<td
					>{
						repoData.repo?.manifest.authorUrl ? (
							<a href={repoData.repo?.manifest.authorUrl} target="_blank">
								{plugin.currentEntry.author}
							</a>
						) : (
							plugin.currentEntry.author
						)
					}</td
				>
			</tr>
			{
				repoData.repo?.manifest?.fundingUrl && (
					<tr>
						<td>Funding</td>
						<td>
							{getFundingLinks(repoData.repo.manifest.fundingUrl).map(link => (
								<>
									<a href={link.href}>{link.text}</a> <br />
								</>
							))}
						</td>
					</tr>
				)
			}
			{
				repoData.repo && (
					<tr>
						<td>Minimum Obsidian Version</td>
						<td>{repoData.repo.manifest.minAppVersion}</td>
					</tr>
				)
			}
			<tr>
				<td>Official Release Date</td>
				<td><Commit commit={plugin.addedCommit} /></td>
			</tr>
			<tr>
				<td>Last update</td>
				<td>{latestReleaseDateString}</td>
			</tr>
		</tbody>
	</table>

	<h3 class="only-show-small">Quick Links</h3>
	<ul class="only-show-small">
		{
			external_links.map(link => (
				<li>
					<a href={link.href} target="_blank">
						{link.text}
					</a>
				</li>
			))
		}
	</ul>

	<h3 id="changes">Changes</h3>

	<table class="full-width">
		<thead>
			<tr>
				<th>Date</th>
				<th>Changed Property</th>
				<th>Old Value</th>
				<th>New Value</th>
			</tr>
		</thead>
		<tbody>
			{
				plugin.changeHistory.map(change => (
					<tr>
						<td>
							<Commit commit={change.commit} />
						</td>
						<td>{change.property}</td>
						<td>{change.oldValue}</td>
						<td>{change.newValue}</td>
					</tr>
				))
			}
		</tbody>
	</table>

	<h3 id="repository-data">Repository Data</h3>

	{
		repoData.repo ? (
			<>
				<table class="full-width">
					<tbody>
						<tr>
							<td>License</td>
							<td>
								<code>{repoData.repo.license}</code> in <code>package.json</code>, <code>{repoData.repo.licenseFile}</code> in <code>LICENSE</code> file
							</td>
						</tr>
						<tr>
							<td>Package Manager</td>
							<td>{repoData.repo.packageManager ?? 'Unknown (no lock file found)'}</td>
						</tr>
						<tr>
							<td>Uses Typescript</td>
							<td>
								{repoData.repo.usesTypescript ? (
									'true'
								) : (
									<>
										No <code>.ts</code> or <code>.tsx</code> files found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Installed Bundlers</td>
							<td>
								{repoData.repo.hasPackageJson ? (
									repoData.repo.installedBundlers.length === 0 ? (
										'none'
									) : (
										repoData.repo.installedBundlers.join(', ')
									)
								) : (
									<>
										No <code>package.json</code> found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Installed Testing Frameworks</td>
							<td>
								{repoData.repo.hasPackageJson ? (
									repoData.repo.installedTestingFrameworks.length === 0 ? (
										'none'
									) : (
										repoData.repo.installedTestingFrameworks.join(', ')
									)
								) : (
									<>
										No <code>package.json</code> found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Has Test Files</td>
							<td>
								{repoData.repo.hasPackageJson ? (
									repoData.repo.hasTestFiles ? (
										'true'
									) : (
										'false'
									)
								) : (
									<>
										No <code>package.json</code> found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Uses BRAT beta releases</td>
							<td>{repoData.repo.hasBetaManifest ? 'true' : 'false'}</td>
						</tr>
						<tr>
							<td>Dependencies</td>
							<td>
								{repoData.repo.hasPackageJson ? (
									repoData.repo.dependencies.sort().join(', ')
								) : (
									<>
										No <code>package.json</code> found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Dev Dependencies</td>
							<td>
								{repoData.repo.hasPackageJson ? (
									repoData.repo.devDependencies.sort().join(', ')
								) : (
									<>
										No <code>package.json</code> found
									</>
								)}
							</td>
						</tr>
					</tbody>
				</table>

				<p class="muted">
					<i>License</i> information is extracted from the <code>package.json</code> and the <code>LICENSE</code> file. If they do not match, say{' '}
					<code>unknown</code>, or say <code>not found</code>, please check the repository or contact the author for clarification.
				</p>
				<p class="muted">
					<i>Has Test Files</i> looks for files ending in <code>.test.js</code>, <code>.test.ts</code>, <code>.spec.js</code> or <code>.spec.ts</code>.
				</p>
				<p class="muted">
					<i>Installed Testing Frameworks</i> looks at installed dependencies. This does not mean that a plugin is actually using the testing framework.
				</p>
				<p class="muted">
					<i>Dependencies</i> and <i>Dev Dependencies</i> only list the direct dependencies of the plugin.
				</p>
			</>
		) : (
			<p>No data available.</p>
		)
	}

	<h2 id="downloads">Downloads</h2>

	<PluginDownloadChart dataPoints={pluginDownloadData} client:only="svelte" />

	<h2 id="version-history">Version History</h2>

	<table class="full-width">
		<thead>
			<tr>
				<th>Version</th>
				<th>Release Date</th>
				<th>Note</th>
			</tr>
		</thead>
		<tbody>
			{
				plugin.versionHistory.map(version => (
					<tr>
						<td>{version.version}</td>
						<td>{version.initialReleaseDate}</td>
						<td>{repoData.deprecatedVersions.includes(version.version) ? <>Blacklisted</> : <span class="muted">None</span>}</td>
					</tr>
				))
			}
		</tbody>
	</table>

	<p class="muted">
		<i>Blacklisted</i> versions are versions that are known to cause major issues or contain security concerns and have thus been blacklisted by the Obsidian team.
		Obsidian will disable plugins on startup whose installed verion is blacklisted. It is strongly recommended to update to a newer version.
	</p>
</StarlightPage>
